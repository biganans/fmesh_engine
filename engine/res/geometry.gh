vec3 calc_triangle_normal(vec3 v0, vec3 v1, vec3 v2)
{
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    return normalize(cross(e1, e2));
}


vec3 calc_half_vec(vec3 normal, vec3 v2e)
{
    return normalize(normal + v2e);
}

vec4 unpack_normal(sampler2D normal_map, vec2 uv)
{
    vec4 normal = texture(normal_map, uv);
    normal.xyz = normal.xyz * 2 - 1;
    return normal;
}

vec3 calc_tangent(vec3 v0, vec3 v1, vec3 v2, vec2 uv0, vec2 uv1, vec2 uv2)
{
    vec3 p1 = v1 - v0;
    vec3 p2 = v2 - v0;

    vec2 u1 = uv1 - uv0;
    vec2 u2 = uv2 - uv0;

    return (p1 * u2.y - p2 * u1.y) / (u1.x * u2.y - u1.y * u2.x);
}

vec3 calc_bitangent(vec3 v0, vec3 v1, vec3 v2, vec2 uv0, vec2 uv1, vec2 uv2)
{
    vec3 p1 = v1 - v0;
    vec3 p2 = v2 - v0;

    vec2 u1 = uv1 - uv0;
    vec2 u2 = uv2 - uv0;

    return (p2 * u1.x - p1 * u2.x) / (u1.x * u2.y - u1.y * u2.x);
}
