const mat4 mat4_identity = mat4(1, 0, 0, 0,
                                0, 1, 0, 0,
                                0, 0, 1, 0,
                                0, 0, 0, 1);

mat4 scale(float sx, float sy, float sz)
{
    return mat4(sx, 0,  0,   0,
                0,  sy, 0,   0,
                0,  0,  sz,  0,
                0,  0,  0,   1);
}

mat4 translate(float tx, float ty, float tz)
{
    return mat4(1,  0,  0,  0,
                0,  1,  0,  0,
                0,  0,  1,  0,
                tx, ty, tz, 1);
}

mat4 rotate(float x, float y, float z, float radians)
{
    vec3 v = normalize(vec3(x, y, z));
    float cosv = cos(radians);
    float cosp = 1.0f - cosv;
    float sinv = sin(radians);

    return mat4(cosv + cosp * v[0] * v[0],
                cosp * v[0] * v[1] + v[2] * sinv,
                cosp * v[0] * v[2] - v[1] * sinv,
                0.0f,
                cosp * v[0] * v[1] - v[2] * sinv,
                cosv + cosp * v[1] * v[1],
                cosp * v[1] * v[2] + v[0] * sinv,
                0.0f,
                cosp * v[0] * v[2] + v[1] * sinv,
                cosp * v[1] * v[2] - v[0] * sinv,
                cosv + cosp * v[2] * v[2],
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                1.0f);
}

mat3 to_normal_mat(mat4 model_view)
{
    return transpose(inverse(mat3(model_view)));
}

mat3 tbn_mat(vec3 tangent, vec3 bitangent, vec3 normal)
{
    return mat3(tangent, bitangent, normal);
}

vec2 uv_flip(vec2 uv)
{
    const mat3 t = mat3( 1,  0,  0,
                         0, -1,  0,
                         0,  1,  1);
    return (t * vec3(uv, 1.0)).xy;
}
